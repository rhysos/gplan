
      {/* Add Plant Dialog - For selecting and adding plants to a row */}
      <Dialog
        open={isAddPlantDialogOpen}
        onOpenChange={(open) => {
          setIsAddPlantDialogOpen(open)
          if (!open) {
            setAddingPlantToRowId(null)
            setSelectedPlant(null) // Reset selected plant when closing
          }
        }}
      >
        <DialogContent className="max-w-md" aria-describedby="add-plant-description">
          <DialogDescription id="add-plant-description">Select a flower to add to the row.</DialogDescription>
          <DialogHeader>
            <DialogTitle>Add Flower to {rows.find((r) => r.id === addingPlantToRowId)?.name || "Row"}</DialogTitle>
          </DialogHeader>
          <div className="py-2">
            <div className="space-y-1">
              <Label htmlFor="plant-select">Select a flower:</Label>
              <div className="mt-1 max-h-[300px] overflow-y-auto border rounded-md">
                {plants.map((plant) => {
                  // Calculate availability
                  const quantity = plant.quantity || 0
                  const usedCount = usageCounts[plant.id] || 0
                  const available = quantity - usedCount

                  // Check if plant would fit in the row
                  const canFit = addingPlantToRowId
                    ? wouldPlantFit(rows.find((r) => r.id === addingPlantToRowId)!, plant)
                    : true

                  const isDisabled = available <= 0 || !canFit
                  const isSelected = selectedPlant === plant.id

                  return (
                    <div
                      key={plant.id}
                      onClick={() => {
                        if (!isDisabled && !addingPlantLoading) {
                          setSelectedPlant(plant.id)
                        }
                      }}
                      className={`flex items-center gap-2 p-2 cursor-pointer border-b last:border-b-0 transition-colors ${
                        isDisabled ? "opacity-50 cursor-not-allowed" : "hover:bg-muted/20"
                      } ${isSelected ? "bg-primary/20" : ""}`}
                    >
                      <div className="w-10 h-10 rounded overflow-hidden flex-shrink-0 flex items-center justify-center">
                        <CloudinaryImage
                          src={plant.image_url}
                          alt={plant.name}
                          width={40}
                          height={40}
                          className="w-full h-full object-cover object-center"
                        />
                      </div>
                      <div className="flex-1 overflow-hidden">
                        <div className="flex justify-between items-center">
                          <span className="font-medium truncate">{plant.name}</span>
                          <Badge variant={available > 0 ? "outline" : "destructive"} className="ml-2">
                            {available} left
                          </Badge>
                        </div>
                        <div className="text-xs text-muted-foreground">Spacing: {plant.spacing} cm</div>
                      </div>